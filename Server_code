const express = require('express');
const cors = require('cors');
const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const app=express();
const port=process.env.PORT || 3000;
//midlewares
app.use(cors());
app.use(express.json());


//connect to mongo dp

const uri =
  "mongodb+srv://Jakuan:OjWYLJ0YFQWct3j8@cluster0.tuasx7e.mongodb.net/?appName=Cluster0";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    const userCollection=client.db('UserInfo').collection('users');
    //get ||read == single doc
    app.get('/users/:id',async(req,res)=>{
        const id=req.params.id;
        const query={_id:new ObjectId(id)}
        const user=await userCollection.findOne(query);
        console.log('single user',user)
        res.send(user)
    })
    // get || read = multiple doc
    app.get('/users',async(req,res)=>{
        const cursor=userCollection.find();
        const result=await cursor.toArray();
        res.send(result)
    })
    //create || post
    app.post('/users',async(req,res)=>{
        const newUser=req.body;
        console.log('added new user',newUser)
        const result=await userCollection.insertOne(newUser);
        res.send(result)

    })
    //delete || remove
    app.delete('/users/:id',async(req,res)=>{
        const id=req.params.id;
        const query={_id:new ObjectId(id)}
        const result=await userCollection.deleteOne(query)
        console.log('deleted user',result)
        res.send(result)
    })
    //update user
    app.put("/update/:id",async(req,res)=>{
        const id=req.params.id;
        const user=req.body;
        const filter={_id : new ObjectId(id)}
        const option={upsert:true}
        const updatedUser={
            $set:{
                name:user.name,
                email:user.email,
            }
        }
        const result=await userCollection.updateOne(filter,updatedUser,option);
        console.log('updated user',updatedUser)
        res.send(result)
    })
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log(
      "Pinged your deployment. You successfully connected to MongoDB!"
    );
  } finally {
    // Ensures that the client will close when you finish/error
    // await client.close();
  }
}
run().catch(console.dir);




//connection port
app.listen(port,(req,res)=>{
    console.log(`server running on port ${port}`);
})
